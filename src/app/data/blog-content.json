{
  "content": {
    "1": "I've been trying to master Kafka ever since the Summer started. I found it while reading a Substack article about distributed systems.\n\nDuring my 2nd week at The Royal Bank of Canada (RBC) as a software engineer, I was told that I could enroll on RBC's Udemy platform and take a variety of courses for free. I saw that there was a Kafka course with Java Spring Boot and decided to enrol in it. From there, I learned of two architectural design patterns: The SAGA design pattern the and Outbox design pattern.\n\nThe Saga design pattern is used to manage distributed transactions across multiple services without relying on a single global transaction. Instead of one long transaction, a Saga breaks the workflow into a sequence of local transactions, each with a corresponding compensating action to undo its effects if necessary.\n\nFor example, suppose a business process has four stages: A → B → C → D. If stage C fails, the Saga doesn't just report the error—it triggers compensating actions to roll back B and A so the system returns to a consistent state.\n\nThere are two common ways to implement Sagas:\n\nOrchestration: a central coordinator directs each step and invokes compensations on failure.\n\nChoreography: services communicate via events, and compensations are triggered by listening to failure events.\n\nThis pattern is widely used in distributed systems and microservices architectures to maintain consistency while ensuring that partial failures can be gracefully handled.\n\nThe Outbox pattern is used to ensure reliable communication between a service (e.g., an API) and a message broker (e.g., Kafka) while maintaining consistency with the service's database.\n\nWhen the service handles a request and updates its database, it also writes the corresponding event to an \"outbox\" table in the same database transaction. For example, when creating an order, the service inserts a row into the orders table and a matching event into the outbox_events table. Because both inserts happen within a single transaction, this guarantees that if the order is committed, the event is also committed — ensuring there is no \"half success\" where the database is updated but no event is published, or vice versa.\n\nA separate background process (sometimes called a dispatcher or Kafka connector) continuously scans the outbox table for new, unprocessed events and publishes them to Kafka. Instead of running only once in a long interval (like every hour), it typically runs on a very short interval or even in near real time. This ensures that as soon as a service writes an event to the outbox table, it will be picked up, published to Kafka, and then marked as processed in the database, keeping the system both consistent and responsive.\n\nBecause the database update and the outbox write happen in a single atomic transaction, you avoid inconsistencies (e.g., \"DB updated but no event sent\" or \"event sent but DB not updated\"). The database guarantees that the event is durably stored in the outbox table. A separate dispatcher then reliably delivers the event to Kafka and marks it as processed, ensuring that no events are lost even if Kafka is temporarily unavailable.",
    "2": "I spent the past summer volunteering for a local food bank in Chinatown. I went every Monday to help the food bank with one task: Give food to Chinese seniors living in subsidized housing. It was my first time ever doing something like this. I did it on a whim. I would go to school and see a lineup by the food bank. Out of curiosity, I searched up the food bank and saw that there was a way to volunteer. That's what I did. Despite applying late, I somehow got in. I don't regret it one bit.\n\nMy main task consisted of bringing food from the food bank over to the housing projects, package the food into grocery bags, and distribute them floor by floor. A distinct thing I remember explaining was my background and how it didn't match that of typical volunteers at the food bank. For context, I'm a computer science major. When I was asked why I volunteered for the food bank, I didn't exactly give a straight answer. Luckily, a simple \"I always saw the big lines on my way to school and wanted to help out\" sufficed as an explanation.\n\nDeep down, I knew it was for another reason: to see how other people suffered that I didn't yet know or understand. I understood that I lived a comfortable life. I was a university student. I had food on the table. I had everything in life that I needed to live meaningfully. All this made me realize that there was a side to life that I wasn't exposed to. The side of life where people struggled to live. Starvation. Poverty. All these things occur in someone's worldview close to you. I wanted to be someone that understood as much of the world as possible. I was afraid that my ignorance of people different from my background would render me naive.\n\nEvery Monday I went in. I saw people smiling and hugging each other. Despite the challenges they may have faced or the situation that they were in, they still had that ability to smile and enjoy the present moment. It's a testament to their mental resilience. It's also a testament to their ability to let go of the past and to be grateful in the present moment.\n\nI learned this as I went in each Monday to volunteer. Being surrounded by the volunteers, and meeting those that needed the food rations each Monday, made me more appreciative and grateful for my life. It's helped me learn to let go of the past in order to focus on the present moment. As a young kid, I always had a hard time letting go. Mistakes, regrets, and mishaps all added up to mentally incapacitate me. I've learned to let go of the past - whether good or bad - to focus on the present moment. Holding on to the good things in life, like accolades, achievements, and cause you to be egotistical by potentially inflating your self worth. Holding on to the bad things can prevent you from focusing on what you need to do in the present moment to succeed and be fulfilled. I learned that you have to let go of both to focus on the present moment, no matter what.\n\n This way, all your energy is focused on the present moment. I would argue that of all the things, making the most of the present matters the most.",
    "3": "This is a placeholder for the time management and life balance blog post. The content will be added here when ready.\n\nThis post will explore how to effectively manage time between studies, work, hobbies, and personal relationships. I'll share my own experiences and strategies for finding balance as a student and young professional.\n\nStay tuned for the full content!",
    "4": "I'm officially writing this reflection a month after I've started at RBC (Royal Bank of Canada) as a Software Developer Intern. One word comes to mind: Jitters. It came from a José Bautista podcast I watched recently. It's October. The MLB playoffs are underway. In the podcast, José recommended to channel the nervous energy from October baseball into action.\n\nI don't think I was particularly nervous during my first day at RBC. More so, I wanted everything to be perfect. I dressed up really formally. I wore a suit and tie, dress pants, and dress shoes. Looking back, I definitely overdressed. It's a weird feeling. The first day is an adjustment period, and I was trying to best fit that adjustment mold. I wanted to shape myself as perfectly as possible to fit this abstract mold of what I thought the perfect intern would be. To be continued!",
    "5": "This is a placeholder for the reflection on childhood and personal growth blog post. The content will be added here when ready.\n\nThis post will be a personal reflection on my childhood experiences, the mistakes I've made, and how they've shaped me into who I am today. It will explore themes of growth, forgiveness, and learning from the past.\n\nStay tuned for the full content!",
    "6": "This is a placeholder for the reflection on the loss of individualism and self when dating.\n\nStay tuned for the full content!"

  }
}
